// This file is auto-generated by @hey-api/openapi-ts

export type Debt2 = Debt;

export type User2 = User;

export type CurrentUser2 = CurrentUser;

export type NotificationSettings2 = NotificationSettings;

export type Group2 = Group;

export type UnauthorizedError = Unauthorized;

export type ForbiddenError = Forbidden;

export type NotFoundError = NotFound;

export type User = {
    id?: number;
    first_name?: string;
    last_name?: string | null;
    email?: string;
    registration_status?: 'confirmed' | 'dummy' | 'invited';
    picture?: {
        small?: string;
        medium?: string;
        large?: string;
    };
    custom_picture?: boolean;
};

/**
 * User's notification preferences
 */
export type NotificationSettings = {
    [key: string]: boolean;
};

export type CurrentUser = User & {
    /**
     * ISO 8601 date/time indicating the last time notifications were read
     */
    notifications_read?: string;
    /**
     * Number of unread notifications since notifiations_read
     */
    notifications_count?: number;
    notifications?: NotificationSettings;
    default_currency?: string;
    /**
     * ISO_639-1 2-letter locale code
     */
    locale?: string;
};

export type Unauthorized = {
    error?: string;
};

export type Forbidden = {
    errors?: {
        base?: Array<string>;
    };
};

export type NotFound = {
    errors?: {
        base?: Array<string>;
    };
};

export type Debt = {
    /**
     * User ID
     */
    from?: number;
    /**
     * User ID
     */
    to?: number;
    amount?: string;
    currency_code?: string;
};

export type Group = {
    id?: number;
    name?: string;
    /**
     * What is the group used for?
     *
     * **Note**: It is recommended to use `home` in place of `house` or `apartment`.
     *
     */
    group_type?: 'home' | 'trip' | 'couple' | 'other' | 'apartment' | 'house';
    updated_at?: string;
    simplify_by_default?: boolean;
    members?: Array<User & {
        balance?: Array<{
            currency_code?: string;
            amount?: string;
        }>;
    }>;
    original_debts?: Array<Debt>;
    simplified_debts?: Array<Debt>;
    avatar?: {
        original?: string | null;
        xxlarge?: string;
        xlarge?: string;
        large?: string;
        medium?: string;
        small?: string;
    };
    custom_avatar?: boolean;
    cover_photo?: {
        xxlarge?: string;
        xlarge?: string;
    };
    /**
     * A link the user can send to a friend to join the group directly
     */
    invite_link?: string;
};

export type Balance = {
    currency_code?: string;
    amount?: string;
};

export type Friend = User & {
    groups?: Array<{
        group_id?: number;
        balance?: Array<Balance>;
    }>;
    balance?: Array<Balance>;
    updated_at?: string;
};

export type Common = {
    /**
     * A string representation of a decimal value, limited to 2 decimal places
     */
    cost?: string;
    /**
     * A short description of the expense
     */
    description?: string;
    /**
     * Also known as "notes."
     */
    details?: string | null;
    /**
     * The date and time the expense took place. May differ from `created_at`
     */
    date?: string;
    repeat_interval?: 'never' | 'weekly' | 'fortnightly' | 'monthly' | 'yearly';
    /**
     * A currency code. Must be in the list from `get_currencies`
     */
    currency_code?: string;
    /**
     * A category id from `get_categories`
     */
    category_id?: number;
};

export type CommentUser = {
    id?: number;
    first_name?: string;
    last_name?: string;
    picture?: {
        medium?: string;
    };
};

export type Share = {
    user?: CommentUser;
    user_id?: number;
    paid_share?: string;
    owed_share?: string;
    net_balance?: string;
};

export type Comment = {
    id?: number;
    content?: string;
    comment_type?: 'System' | 'User';
    relation_type?: 'ExpenseComment';
    /**
     * ID of the subject of the comment
     */
    relation_id?: number;
    created_at?: string;
    deleted_at?: string | null;
    user?: CommentUser;
};

export type Expense = Common & {
    id?: number;
    /**
     * Null if the expense is not associated with a group.
     */
    group_id?: number | null;
    /**
     * Null if the expense is not associated with a friendship.
     */
    friendship_id?: number | null;
    expense_bundle_id?: number | null;
    description?: string;
    /**
     * Whether the expense recurs automatically
     */
    repeats?: boolean;
    repeat_interval?: 'never' | 'weekly' | 'fortnightly' | 'monthly' | 'yearly';
    /**
     * Whether a reminder will be sent to involved users in advance of the next occurrence of a recurring expense.
     * Only applicable if the expense recurs.
     *
     */
    email_reminder?: boolean;
    /**
     * Number of days in advance to remind involved users about the next occurrence of a new expense.
     * Only applicable if the expense recurs.
     *
     */
    email_reminder_in_advance?: null | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 14;
    /**
     * The date of the next occurrence of a recurring expense. Only applicable if the expense recurs.
     */
    next_repeat?: string | null;
    /**
     * Also known as "notes."
     */
    details?: string | null;
    comments_count?: number;
    /**
     * Whether this was a payment between users
     */
    payment?: boolean;
    /**
     * If a payment was made via an integrated third party service, whether it was confirmed by that service.
     */
    transaction_confirmed?: boolean;
    cost?: string;
    currency_code?: string;
    repayments?: Array<{
        /**
         * ID of the owing user
         */
        from?: number;
        /**
         * ID of the owed user
         */
        to?: number;
        amount?: string;
    }>;
    /**
     * The date and time the expense took place. May differ from `created_at`
     */
    date?: string;
    /**
     * The date and time the expense was created on Splitwise
     */
    created_at?: string;
    created_by?: User & unknown;
    /**
     * The last time the expense was updated.
     */
    updated_at?: string;
    updated_by?: User & unknown;
    /**
     * If the expense was deleted, when it was deleted.
     */
    deleted_at?: string | null;
    deleted_by?: User & unknown;
    category?: {
        id?: number;
        /**
         * Translated to the current user's locale
         */
        name?: string;
    };
    receipt?: {
        large?: string | null;
        original?: string | null;
    };
    users?: Array<Share>;
    comments?: Array<Comment>;
};

export type EqualGroupSplit = Common & {
    /**
     * The group to put this expense in.
     */
    group_id?: number;
    split_equally?: true;
} & unknown;

export type ByShares = Common & {
    /**
     * The group to put this expense in, or `0` to create an expense outside of a group.
     */
    group_id?: number;
    users__0__user_id?: number;
    /**
     * Decimal amount as a string with 2 decimal places. The amount this user paid for the expense
     */
    users__0__paid_share?: string;
    /**
     * Decimal amount as a string with 2 decimal places. The amount this user owes for the expense
     */
    users__0__owed_share?: string;
    users__1__first_name?: string;
    users__1__last_name?: string;
    users__1__email?: string;
    /**
     * Decimal amount as a string with 2 decimal places. The amount this user paid for the expense
     */
    users__1__paid_share?: string;
    /**
     * Decimal amount as a string with 2 decimal places. The amount this user owes for the expense
     */
    users__1__owed_share?: string;
    [key: string]: string | number | undefined;
} & unknown;

export type Notification = {
    id?: number;
    type?: number;
    created_at?: string;
    created_by?: number;
    source?: {
        type?: string;
        id?: number;
        url?: string | null;
    } | null;
    image_url?: string;
    image_shape?: 'square' | 'circle';
    content?: string;
};

export type Category = {
    id?: number;
    name?: string;
    icon?: string;
    icon_types?: {
        slim?: {
            small?: string;
            large?: string;
        };
        square?: {
            large?: string;
            xlarge?: string;
        };
    };
};

export type ParentCategory = Category & {
    id?: unknown;
    name?: unknown;
    subcategories?: Array<Category>;
};

export type GetGetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get_current_user';
};

export type GetGetCurrentUserErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type GetGetCurrentUserError = GetGetCurrentUserErrors[keyof GetGetCurrentUserErrors];

export type GetGetCurrentUserResponses = {
    /**
     * OK
     */
    200: {
        user?: CurrentUser;
    };
};

export type GetGetCurrentUserResponse = GetGetCurrentUserResponses[keyof GetGetCurrentUserResponses];

export type GetGetUserByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/get_user/{id}';
};

export type GetGetUserByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetUserByIdError = GetGetUserByIdErrors[keyof GetGetUserByIdErrors];

export type GetGetUserByIdResponses = {
    /**
     * OK
     */
    200: {
        user?: User;
    };
};

export type GetGetUserByIdResponse = GetGetUserByIdResponses[keyof GetGetUserByIdResponses];

export type PostUpdateUserByIdData = {
    body: {
        first_name?: string;
        last_name?: string;
        email?: string;
        password?: string;
        locale?: string;
        default_currency?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/update_user/{id}';
};

export type PostUpdateUserByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostUpdateUserByIdError = PostUpdateUserByIdErrors[keyof PostUpdateUserByIdErrors];

export type PostUpdateUserByIdResponses = {
    /**
     * OK
     */
    200: User;
};

export type PostUpdateUserByIdResponse = PostUpdateUserByIdResponses[keyof PostUpdateUserByIdResponses];

export type GetGetGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get_groups';
};

export type GetGetGroupsErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type GetGetGroupsError = GetGetGroupsErrors[keyof GetGetGroupsErrors];

export type GetGetGroupsResponses = {
    /**
     * OK
     */
    200: {
        groups?: Array<Group>;
    };
};

export type GetGetGroupsResponse = GetGetGroupsResponses[keyof GetGetGroupsResponses];

export type GetGetGroupByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/get_group/{id}';
};

export type GetGetGroupByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetGroupByIdError = GetGetGroupByIdErrors[keyof GetGetGroupByIdErrors];

export type GetGetGroupByIdResponses = {
    /**
     * OK
     */
    200: {
        group?: Group;
    };
};

export type GetGetGroupByIdResponse = GetGetGroupByIdResponses[keyof GetGetGroupByIdResponses];

export type PostCreateGroupData = {
    body: {
        name: string;
        /**
         * What is the group used for?
         *
         * **Note**: It is recommended to use `home` in place of `house` or `apartment`.
         *
         */
        group_type?: 'home' | 'trip' | 'couple' | 'other' | 'apartment' | 'house';
        /**
         * Turn on simplify debts?
         */
        simplify_by_default?: boolean;
        [key: string]: string | ('home' | 'trip' | 'couple' | 'other' | 'apartment' | 'house') | boolean | undefined;
    };
    path?: never;
    query?: never;
    url: '/create_group';
};

export type PostCreateGroupErrors = {
    /**
     * Bad Request
     */
    400: {
        errors?: {
            base?: Array<string>;
        };
    };
};

export type PostCreateGroupError = PostCreateGroupErrors[keyof PostCreateGroupErrors];

export type PostCreateGroupResponses = {
    /**
     * OK
     */
    200: {
        group?: Group;
    };
};

export type PostCreateGroupResponse = PostCreateGroupResponses[keyof PostCreateGroupResponses];

export type PostDeleteGroupByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/delete_group/{id}';
};

export type PostDeleteGroupByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type PostDeleteGroupByIdError = PostDeleteGroupByIdErrors[keyof PostDeleteGroupByIdErrors];

export type PostDeleteGroupByIdResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
    };
};

export type PostDeleteGroupByIdResponse = PostDeleteGroupByIdResponses[keyof PostDeleteGroupByIdResponses];

export type PostUndeleteGroupByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/undelete_group/{id}';
};

export type PostUndeleteGroupByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostUndeleteGroupByIdError = PostUndeleteGroupByIdErrors[keyof PostUndeleteGroupByIdErrors];

export type PostUndeleteGroupByIdResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
        errors?: Array<string>;
    };
};

export type PostUndeleteGroupByIdResponse = PostUndeleteGroupByIdResponses[keyof PostUndeleteGroupByIdResponses];

export type PostAddUserToGroupData = {
    body: {
        group_id?: number;
        user_id: number;
    } | {
        group_id?: number;
        first_name: string;
        last_name: string;
        email: string;
    };
    path?: never;
    query?: never;
    url: '/add_user_to_group';
};

export type PostAddUserToGroupResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
        user?: User;
        errors?: {
            [key: string]: Array<string>;
        };
    };
};

export type PostAddUserToGroupResponse = PostAddUserToGroupResponses[keyof PostAddUserToGroupResponses];

export type PostRemoveUserFromGroupData = {
    body: {
        group_id: number;
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/remove_user_from_group';
};

export type PostRemoveUserFromGroupResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
        errors?: {
            [key: string]: Array<string>;
        };
    };
};

export type PostRemoveUserFromGroupResponse = PostRemoveUserFromGroupResponses[keyof PostRemoveUserFromGroupResponses];

export type GetGetFriendsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get_friends';
};

export type GetGetFriendsErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type GetGetFriendsError = GetGetFriendsErrors[keyof GetGetFriendsErrors];

export type GetGetFriendsResponses = {
    /**
     * OK
     */
    200: {
        friends?: Array<Friend & unknown>;
    };
};

export type GetGetFriendsResponse = GetGetFriendsResponses[keyof GetGetFriendsResponses];

export type GetGetFriendByIdData = {
    body?: never;
    path: {
        /**
         * User ID of the friend
         */
        id: number;
    };
    query?: never;
    url: '/get_friend/{id}';
};

export type GetGetFriendByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetFriendByIdError = GetGetFriendByIdErrors[keyof GetGetFriendByIdErrors];

export type GetGetFriendByIdResponses = {
    /**
     * OK
     */
    200: {
        friend?: Friend;
    };
};

export type GetGetFriendByIdResponse = GetGetFriendByIdResponses[keyof GetGetFriendByIdResponses];

export type PostCreateFriendData = {
    body: {
        user_email?: string;
        user_first_name?: string;
        user_last_name?: string;
    };
    path?: never;
    query?: never;
    url: '/create_friend';
};

export type PostCreateFriendErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type PostCreateFriendError = PostCreateFriendErrors[keyof PostCreateFriendErrors];

export type PostCreateFriendResponses = {
    /**
     * OK
     */
    200: {
        friend?: Friend;
    };
};

export type PostCreateFriendResponse = PostCreateFriendResponses[keyof PostCreateFriendResponses];

export type PostCreateFriendsData = {
    body: {
        [key: string]: string;
    };
    path?: never;
    query?: never;
    url: '/create_friends';
};

export type PostCreateFriendsErrors = {
    /**
     * Bad Request
     */
    400: {
        users?: Array<Friend & unknown>;
        errors?: {
            [key: string]: Array<string>;
        };
    };
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type PostCreateFriendsError = PostCreateFriendsErrors[keyof PostCreateFriendsErrors];

export type PostCreateFriendsResponses = {
    /**
     * OK
     */
    200: {
        users?: Array<Friend & unknown>;
        errors?: {
            [key: string]: Array<string>;
        };
    };
};

export type PostCreateFriendsResponse = PostCreateFriendsResponses[keyof PostCreateFriendsResponses];

export type PostDeleteFriendByIdData = {
    body?: never;
    path: {
        /**
         * User ID of the friend
         */
        id: number;
    };
    query?: never;
    url: '/delete_friend/{id}';
};

export type PostDeleteFriendByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type PostDeleteFriendByIdError = PostDeleteFriendByIdErrors[keyof PostDeleteFriendByIdErrors];

export type PostDeleteFriendByIdResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
        errors?: {
            [key: string]: Array<string>;
        };
    };
};

export type PostDeleteFriendByIdResponse = PostDeleteFriendByIdResponses[keyof PostDeleteFriendByIdResponses];

export type GetGetCurrenciesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get_currencies';
};

export type GetGetCurrenciesResponses = {
    /**
     * OK
     */
    200: {
        currencies?: Array<{
            currency_code?: string;
            unit?: string;
        }>;
    };
};

export type GetGetCurrenciesResponse = GetGetCurrenciesResponses[keyof GetGetCurrenciesResponses];

export type GetGetExpenseByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/get_expense/{id}';
};

export type GetGetExpenseByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetExpenseByIdError = GetGetExpenseByIdErrors[keyof GetGetExpenseByIdErrors];

export type GetGetExpenseByIdResponses = {
    /**
     * OK
     */
    200: {
        expense?: Expense;
    };
};

export type GetGetExpenseByIdResponse = GetGetExpenseByIdResponses[keyof GetGetExpenseByIdResponses];

export type GetGetExpensesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If provided, only expenses in that group will be returned, and `friend_id` will be ignored.
         */
        group_id?: number;
        /**
         * ID of another user. If provided, only expenses between the current and provided user will be returned.
         */
        friend_id?: number;
        dated_after?: string;
        dated_before?: string;
        updated_after?: string;
        updated_before?: string;
        limit?: number;
        offset?: number;

        // Undocumented query parameters
        /**
         * If true, only include non-deleted expenses
         */
        visible?: boolean;
        order?: 'date' | 'updated_at' | 'created_at';
    };
    url: '/get_expenses';
};

export type GetGetExpensesErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetExpensesError = GetGetExpensesErrors[keyof GetGetExpensesErrors];

export type GetGetExpensesResponses = {
    /**
     * OK
     */
    200: {
        expenses?: Array<Expense>;
    };
};

export type GetGetExpensesResponse = GetGetExpensesResponses[keyof GetGetExpensesResponses];

export type PostCreateExpenseData = {
    body: EqualGroupSplit | ByShares;
    path?: never;
    query?: never;
    url: '/create_expense';
};

export type PostCreateExpenseErrors = {
    /**
     * Bad Request
     */
    400: {
        errors?: {
            base?: Array<string>;
        };
    };
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostCreateExpenseError = PostCreateExpenseErrors[keyof PostCreateExpenseErrors];

export type PostCreateExpenseResponses = {
    /**
     * OK
     */
    200: {
        expenses?: Array<Expense>;
        errors?: {
            [key: string]: unknown;
        };
    };
};

export type PostCreateExpenseResponse = PostCreateExpenseResponses[keyof PostCreateExpenseResponses];

export type PostUpdateExpenseByIdData = {
    body: ByShares;
    path: {
        /**
         * ID of the expense to update
         */
        id: number;
    };
    query?: never;
    url: '/update_expense/{id}';
};

export type PostUpdateExpenseByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostUpdateExpenseByIdError = PostUpdateExpenseByIdErrors[keyof PostUpdateExpenseByIdErrors];

export type PostUpdateExpenseByIdResponses = {
    /**
     * OK
     */
    200: {
        expenses?: Array<Expense>;
        errors?: {
            [key: string]: unknown;
        };
    };
};

export type PostUpdateExpenseByIdResponse = PostUpdateExpenseByIdResponses[keyof PostUpdateExpenseByIdResponses];

export type PostDeleteExpenseByIdData = {
    body?: never;
    path: {
        /**
         * ID of the expense to delete
         */
        id: number;
    };
    query?: never;
    url: '/delete_expense/{id}';
};

export type PostDeleteExpenseByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostDeleteExpenseByIdError = PostDeleteExpenseByIdErrors[keyof PostDeleteExpenseByIdErrors];

export type PostDeleteExpenseByIdResponses = {
    /**
     * OK
     */
    200: {
        success: boolean;
        errors?: {
            [key: string]: unknown;
        };
    };
};

export type PostDeleteExpenseByIdResponse = PostDeleteExpenseByIdResponses[keyof PostDeleteExpenseByIdResponses];

export type PostUndeleteExpenseByIdData = {
    body?: never;
    path: {
        /**
         * ID of the expense to restore
         */
        id: number;
    };
    query?: never;
    url: '/undelete_expense/{id}';
};

export type PostUndeleteExpenseByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
};

export type PostUndeleteExpenseByIdError = PostUndeleteExpenseByIdErrors[keyof PostUndeleteExpenseByIdErrors];

export type PostUndeleteExpenseByIdResponses = {
    /**
     * OK
     */
    200: {
        success?: boolean;
    };
};

export type PostUndeleteExpenseByIdResponse = PostUndeleteExpenseByIdResponses[keyof PostUndeleteExpenseByIdResponses];

export type GetGetCommentsData = {
    body?: never;
    path?: never;
    query: {
        expense_id: number;
    };
    url: '/get_comments';
};

export type GetGetCommentsErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type GetGetCommentsError = GetGetCommentsErrors[keyof GetGetCommentsErrors];

export type GetGetCommentsResponses = {
    /**
     * OK
     */
    200: {
        comments?: Array<Comment>;
    };
};

export type GetGetCommentsResponse = GetGetCommentsResponses[keyof GetGetCommentsResponses];

export type PostCreateCommentData = {
    body: {
        expense_id?: number;
        content?: string;
    };
    path?: never;
    query?: never;
    url: '/create_comment';
};

export type PostCreateCommentErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type PostCreateCommentError = PostCreateCommentErrors[keyof PostCreateCommentErrors];

export type PostCreateCommentResponses = {
    /**
     * OK
     */
    200: {
        comment?: Comment & {
            relation_id?: unknown;
            comment_type?: unknown;
            content?: unknown;
            user?: CommentUser;
        };
    };
};

export type PostCreateCommentResponse = PostCreateCommentResponses[keyof PostCreateCommentResponses];

export type PostDeleteCommentByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/delete_comment/{id}';
};

export type PostDeleteCommentByIdErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
    /**
     * Forbidden
     */
    403: Forbidden;
    /**
     * Not Found
     */
    404: NotFound;
};

export type PostDeleteCommentByIdError = PostDeleteCommentByIdErrors[keyof PostDeleteCommentByIdErrors];

export type PostDeleteCommentByIdResponses = {
    /**
     * OK
     */
    200: {
        comment?: Comment & {
            comment_type?: unknown;
            content?: unknown;
            user?: CommentUser;
        };
    };
};

export type PostDeleteCommentByIdResponse = PostDeleteCommentByIdResponses[keyof PostDeleteCommentByIdResponses];

export type GetGetNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If provided, returns only notifications after this time.
         */
        updated_after?: string;
        /**
         * Omit (or provide `0`) to get the maximum number of notifications.
         */
        limit?: number;
    };
    url: '/get_notifications';
};

export type GetGetNotificationsErrors = {
    /**
     * Invalid API key or OAuth access token
     */
    401: Unauthorized;
};

export type GetGetNotificationsError = GetGetNotificationsErrors[keyof GetGetNotificationsErrors];

export type GetGetNotificationsResponses = {
    /**
     * OK
     */
    200: {
        notifications?: Array<Notification>;
    };
};

export type GetGetNotificationsResponse = GetGetNotificationsResponses[keyof GetGetNotificationsResponses];

export type GetGetCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get_categories';
};

export type GetGetCategoriesResponses = {
    /**
     * OK
     */
    200: {
        categories?: Array<ParentCategory>;
    };
};

export type GetGetCategoriesResponse = GetGetCategoriesResponses[keyof GetGetCategoriesResponses];